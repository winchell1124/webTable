{"relation":[["jcr:title","War and peace","Cinderella"],["jcr:description","novel","fairytale"],["jcr:path","/document1","/document2"],["jcr:score","3806","3806"]],"pageTitle":"Reference Guide / eXo JCR","title":"","url":"http://docs.jboss.org/exojcr/1.15.3-GA/developer/en-US/html_single/","hasHeader":true,"headerPosition":"FIRST_ROW","tableType":"RELATION","tableNum":24,"s3Link":"common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.50/warc/CC-MAIN-20150728002310-00207-ip-10-236-191-2.ec2.internal.warc.gz","recordEndOffset":76373983,"recordOffset":76176074,"tableOrientation":"HORIZONTAL","TableContextTimeStampBeforeTable":"{264943\u003dCopyright © 2012 eXoPlatform SAS, 2003\u003dMySQL 5.0.18 MYSQL Connector/J 5.0.8, 1130\u003dMS SQL Server 2005 SP3 JDBC Driver 3.0, 165096\u003dRoy T. Fielding, JSR 170 Overview: Standardizing the Content Repository Interface (March 13, 2005), 1884\u003dMySQL 5.5.17 MYSQL Connector/J 5.1.18, 1069\u003dMS SQL Server 2008 JDBC Driver 3.0, 1635\u003dPostgresSQL 8.4.14 JDBC4 Driver, Version 8.4-702, 164875\u003dBenjamin Mestrallet, Tuan Nguyen, Gennady Azarenkov, Francois Moron and Brice Revenant eXo Platform v2, Portal, JCR, ECM, Groupware and Business Intelligence. (January 2006), 55271\u003dJCR MySQL-backend requires special dialect MySQL-UTF8 to be used for internationalization support. But the database default charset should be latin1 to use limited index space effectively (1000 bytes for MyISAM engine, 767 for InnoDB). If database default charset is multibyte, a JCR database initialization error is thrown concerning index creation failure. In other words, JCR can work on any singlebyte default charset of database, with UTF8 supported by MySQL server. But we have tested it only on latin1 database default charset., 1012\u003dMS SQL Server 2008 R2 JDBC Driver 3.0, 1944\u003dMySQL 5.1.36 MYSQL Connector/J 5.1.14}","TableContextTimeStampAfterTable":"{228578\u003ddocument1 (mix:title) jcr:title\u003d\"War and peace\" jcr:description\u003d\"novel\" prop_pagecount\u003d1000, 693291\u003dBeware of setting maxThreads too big, this can cause OutOfMemoryError. We\u0027ve got it with maxThreads\u003d1250 on such machine:, 9901\u003dOne more mandatory JCR requirement for underlying databases is a case sensitive collation. Microsoft SQL Server both 2005 and 2008 customers must configure their server with collation corresponding to personal needs and requirements, but obligatorily case sensitive. For more information please refer to Microsoft SQL Server documentation page \"Selecting a SQL Server Collation\" here., 399189\u003dWhen you have already some FTP server installed in your system , this parameter needs to be changed (2121 for example) to avoid conflicts or if the port is protected., 648790\u003d* Roy T. Fielding, JSR 170 Overview: Standardizing the Content Repository Interface (March 13, 2005), 247593\u003djcr:content (nt:resource) jcr:lastModified\u003d\"2007-01-19T15:34:15.917+02:00\", 246288\u003dFind all nodes of primary type \"nt:resource\" whose jcr:lastModified property value is greater than 2006-06-04 and less than 2008-06-04., 210684\u003ddocument1 (mix:title) jcr:title\u003d\"War and peace\" prop_pagecount\u003d1000, 396184\u003dIf you have Microsoft Office 2010 applications or Microsoft Office 2007 applications installed on a client computer. From that client computer, you try to access an Office file that is stored on a web server that is configured for Basic authentication. The connection between your computer and the web server does not use Secure Sockets Layer (SSL). When you try to open or to download the file, you experience the following symptoms:, 247330\u003djcr:content (nt:resource) jcr:lastModified\u003d\"2005-01-19T15:34:15.917+02:00\", 418326\u003dThe number of rows that should be fetched from the database during backup operation, can be changed thanks to the System property exo.jcr.component.ext.FullBackupJob.fetch-size. The default value of this parameter is 1000., 389284\u003dAt present, eXo JCR WebDav server is tested by using MS Internet Explorer, Dav Explorer, Xythos Drive, Microsoft Office 2003 (as client), and Ubuntu Linux., 697942\u003dIf you intend to use Infinispan, you will have to increase the PermGen size to at least 256 Mo due to the latest versions of JGroups that are needed by Infinispan (please note that Infinspan is only dedicated to the community for now, no support will be provided). In case, you intend to use JBoss Cache, you can keep on using JGroups 2.6.13.GA which means that you don\u0027t need to increase the PermGen size., 247067\u003djcr:content (nt:resource) jcr:lastModified\u003d\"2006-01-19T15:34:15.917+02:00\"}","lastModified":"Mon, 15 Apr 2013 14:01:36 GMT","textBeforeTable":"Table 1.13. Table content Table content is } Value[] values \u003d row.getValues(); // get values of the row Row row \u003d rit.nextRow(); { while (rit.hasNext()) RowIterator rit \u003d result.getRows(); String[] columnNames \u003d result.getColumnNames(); We can also get a table: NodeIterator will return \"folder1\", \"folder2\",\"document1\",\"document2\",\"document3\", and each other nodes in workspace if they are here. } Node findedNode \u003d it.nextNode(); { if(it.hasNext()) NodeIterator it \u003d result.getNodes(); Let\u0027s get nodes: 1.30.9.2.3. Fetching result QueryResult result \u003d query.execute(); // execute query and fetch result Query query \u003d queryManager.createQuery(xpathStatement, Query.XPATH); String xpathStatement \u003d \"//element(*,nt:base)\"; // create query QueryManager queryManager \u003d workspace.getQueryManager(); // make XPath query XPath QueryResult result \u003d query.execute(); // execute query and fetch result Query query \u003d queryManager.createQuery(sqlStatement, Query.SQL); String sqlStatement \u003d \"SELECT * FROM nt:base\"; // create query QueryManager queryManager \u003d workspace.getQueryManager(); // make SQL query SQL 1.30.9.2.2. Query execution document3 (nt:folder) document2 (nt:unstructured) folder2 (nt:folder) document1 (nt:file) folder1 (nt:folder) root Repository contains many different nodes. 1.30.9.2.1. Repository structure: Find all nodes in the repository. Only those nodes are found to which the session has READ permission. See also Access Control.","textAfterTable":"/folder1/folder2/document3 1000 ... ... 1.30.9.3. Finding Nodes by Primary Type Find all nodes whose primary type is \"nt:file\". 1.30.9.3.1. Repository structure: The repository contains nodes with different primary types and mixin types. root document1 primarytype \u003d \"nt:unstructured\" mixintype \u003d \"mix:title\" document2 primarytype \u003d \"nt:file\" mixintype \u003d \"mix:lockable\" document3 primarytype \u003d \"nt:file\" mixintype \u003d \"mix:title\" 1.30.9.3.2. Query execution SQL // make SQL query QueryManager queryManager \u003d workspace.getQueryManager(); // create query String sqlStatement \u003d \"SELECT * FROM nt:file\"; Query query \u003d queryManager.createQuery(sqlStatement, Query.SQL); // execute query and fetch result QueryResult result \u003d query.execute(); XPath // make XPath query QueryManager queryManager \u003d workspace.getQueryManager(); // create query String xpathStatement \u003d \"//element(*,nt:file)\"; Query query \u003d queryManager.createQuery(xpathStatement, Query.XPATH); // execute query and fetch result QueryResult result \u003d query.execute(); 1.30.9.3.3. Fetching result Let\u0027s get nodes: NodeIterator it \u003d result.getNodes(); if(it.hasNext()) { Node findedNode \u003d it.nextNode(); } NodeIterator will return \"document2\" and \"document3\". We can also get a table: String[] columnNames \u003d result.getColumnNames(); RowIterator rit \u003d result.getRows(); while (rit.hasNext()) { Row row \u003d rit.nextRow(); // get values of the row Value[] values \u003d row.getValues();","hasKeyColumn":true,"keyColumnIndex":0,"headerRowIndex":0}